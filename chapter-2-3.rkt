#lang racket

;----Derivation----
(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
           (make-product (multiplier exp)
                         (deriv (multiplicand exp) var))
           (make-product (deriv (multiplier exp) var)
                         (multiplicand exp))))
        ((exponentiation? exp)
         (let ((u (base exp))
               (n (exponent exp)))
           (make-product (make-exponentiation u (- n 1))
                         (make-product n
                                       (deriv u var)))))
        (else
         (error "unknown expression type -- DERIV" exp))))

; vairable check
(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))

; make sum
(define (=number? exp num)
  (and (number? exp) (= exp num)))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list '+ a1 a2))))
; make product
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list '* m1 m2))))
; sum rule
(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))
(define (addend s) (cadr s))
(define (augend s)
  (if (> (length s) 3)
      (cons '+ (cddr s))
      (caddr s)))
; product rule
(define (product? x)
  (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) (cadr p))
(define (multiplicand p)
  (if (> (length p) 3)
      (cons '* (cddr p))
      (caddr p)))
; exponentiation rule
(define (exponentiation? x)
  (and (pair? x) (eq? (car x) '**)))
(define (base p) (cadr p))
(define (exponent p) (caddr p))
; make exponentiation
(define (make-exponentiation u n)
  (cond ((=number? n 0) 1)
        ((=number? n 1) u)
        (else (list '** u n))))

;----Exercise----
;Exercise 2.57
(define (ideriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((isum? exp)
         (imake-sum (ideriv (iaddend exp) var)
                    (ideriv (iaugend exp) var)))
        ((iproduct? exp)
         (imake-sum
           (imake-product (imultiplier exp)
                          (ideriv (imultiplicand exp) var))
           (imake-product (ideriv (imultiplier exp) var)
                          (imultiplicand exp))))
        ((iexponentiation? exp)
         (let ((u (ibase exp))
               (n (iexponent exp)))
           (imake-product (imake-exponentiation u (- n 1))
                          (imake-product n
                                        (ideriv u var)))))
        (else
         (error "unknown expression type -- DERIV" exp))))

; sum rule
(define (isum? x)
  (and (pair? x) (eq? (cadr x) '+)))
(define (iaddend s) (car s))
(define (iaugend s)
  (if (> (length s) 3)
      (cddr s)
      (caddr s)))
; make sum
(define (imake-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list a1 '+ a2))))
; product rule
(define (iproduct? x)
  (and (pair? x) (eq? (cadr x) '*)))
(define (imultiplier p) (car p))
(define (imultiplicand p)
  (if (> (length p) 3)
      (cddr p)
      (caddr p)))
; make product
(define (imake-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list m1 '* m2))))
; exponentiation rule
(define (iexponentiation? x)
  (and (pair? x) (eq? (cadr x) '**)))
(define (ibase p) (car p))
(define (iexponent p) (caddr p))
; make exponentiation
(define (imake-exponentiation u n)
  (cond ((=number? n 0) 1)
        ((=number? n 1) u)
        (else (list u '** n))))

;Exercise 2.59
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set)))))
(define (adjoin-set x set)
  (if (element-of-set? x set)
      set
      (cons x set)))
(define (intersection-set set1 set2)
  (define (iter set0 result)
    ;(display result)
    (cond ((or (null? set0) (null? set2)) result)
          ((and (element-of-set? (car set0) set2)
                (not (element-of-set? (car set0) result)))
           (iter (cdr set0) (cons (car set0) result)))
          (else (iter (cdr set0) result))))
  (iter set1 '()))
(define (union-set set1 set2)
  (cond ((null? set1) set2)
        ((null? set2) set1)
        ((not (element-of-set? (car set1) set2))
         (cons (car set1)
               (union-set (cdr set1) set2)))
        (else (union-set (cdr set1) set2))))

;Exercise 2.64
(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))

(define (element-of-tree? x set)
  (cond ((null? set) false)
        ((= x (entry set)) true)
        ((< x (entry set))
         (element-of-tree? x (left-branch set)))
        ((> x (entry set))
         (element-of-tree? x (right-branch set)))))

(define (adjoin-tree x set)
  (cond ((null? set) (make-tree x '() '()))
        ((= x (entry set)) set)
        ((< x (entry set))
         (make-tree (entry set) 
                    (adjoin-tree x (left-branch set))
                    (right-branch set)))
        ((> x (entry set))
         (make-tree (entry set)
                    (left-branch set)
                    (adjoin-tree x (right-branch set))))))


(define (tree->list-1 tree)
  (if (null? tree)
      '()
      (append (tree->list-1 (left-branch tree))
              (cons (entry tree)
                    (tree->list-1 (right-branch tree))))))

(define (tree->list-2 tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
        result-list
        (copy-to-list (left-branch tree)
                      (cons (entry tree)
                            (copy-to-list (right-branch tree)
                                          result-list)))))
  (copy-to-list tree '()))

(define (list->tree elements)
  (car (partial-tree elements (length elements))))

(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elts left-size)))
          (let ((left-tree (car left-result))
                (non-left-elts (cdr left-result))
                (right-size (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elts))
                  (right-result (partial-tree (cdr non-left-elts)
                                              right-size)))
              (let ((right-tree (car right-result))
                    (remaining-elts (cdr right-result)))
                (cons (make-tree this-entry left-tree right-tree)
                      remaining-elts))))))))

(define t1 (list->tree '(1 3 5 7 9 11)))
t1
(tree->list-2 t1)
(tree->list-1 t1)


